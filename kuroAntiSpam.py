# kuroAntiSpam.py

# This script looks at remote posts on your instances public timeline,
# filters japanese language posts, and then reports and suspends the account if
# it mentioned > 3 accounts, posted either of the spamsite names, and have no avatar.
# If the instance has no follower relationships between any users on your instance,
# it also suspends the instance with the reason "Temporary DDOS"

import requests, json, hashlib, time

# New variable to decide action on domain
DOMAIN_ACTION = "suspend"  
# Possible options:
# silence = Account statuses from this domain will be hidden by default
# suspend = All incoming data from this domain will be rejected
# nothing 

#Your mastodon instance's domain
YOUR_DOMAIN = "mastodon.example"

#Your mastodon applications's access token
ACCESS_TOKEN = "changeme"

#How often the script checks the timeline in seconds
CHECK_INTERVAL = 30

#How many posts the script grabs from the timeline each time it checks (maximum 40)
CHECK_NUMBER = 10

#If True, will continue to check older+older posts down the timeline instead of checking for new ones. This will basically scroll down the timeline as fast as the server lets it so keep an eye on it
SWEEP_DOWN_TIMELINE = False


#these are the md5 hashes of the images that I have seen the spammers use so far. (irrelevant now)
spamHashes = [
    "a6a9ed825b1b605a0b34e44531d9410e",
    "7bb73e31108576c6e94dfe0cd7f1b502",
    "cd544c6b5d0b298e11d5ad77007da9d6",
    "702050f370f0e262368a955a1b26ee1d",
    "992e6224dda4114dd5ab0138b35f0b46"
]


HEADERS = {"Authorization": "Bearer "+ACCESS_TOKEN}


def checkTimeline(max_id="999999999999999999"):
    spammers = []
    url = 'https://'+YOUR_DOMAIN+'/api/v1/timelines/public'
    json_data = {
        "remote": "true",
        "only_media": "false",
        "limit": CHECK_NUMBER,
        "max_id": max_id
    }

    r = requests.get(url, data=json_data, headers=HEADERS)
    if r.status_code != 200:
        print("Failed to check timeline")
        return None
    print(n, "- Checking", len(r.json()), "posts in public timeline")
    for item in r.json():
        last_id = item["id"]
        if checkContent(item) == True:
            spammers.append((item["account"]["id"], item["id"]))  
    spammers = list(set(spammers))
    for spammer, post_id in spammers: 
        sendReport(spammer, post_id)  
    if SWEEP_DOWN_TIMELINE == True:
        checkTimeline(last_id)


def checkContent(mew):
    if len(mew["mentions"]) > 3 and mew["language"] == "ja" and mew["account"]["avatar"] == "https://"+YOUR_DOMAIN+"/avatars/original/missing.png":
        if "https://荒らし.com/" in mew["content"] or "https://ctkpaarr.org/" in mew["content"]:
            print(mew["id"], "Mentions:", len(mew["mentions"]))
            print("---- ", mew["account"]["avatar"])
            return True


def checkImage(imageURL):
     r = requests.get(imageURL)
     if r.status_code != 200:
        print("Failed to download image")
        return None
     md5_hash = hashlib.md5(r.content).hexdigest()
     print(md5_hash)
     for spams in spamHashes:
         if md5_hash == spams:
            print("Oh That Is A Bot \a")
            return True


def sendReport(account_id, status_id):
    url = 'https://'+YOUR_DOMAIN+'/api/v1/reports'
    json_data = {
        "account_id": account_id,
        "comment": "This user was detected to be part of the current spam bot wave. This was an automated report generated by a script made by kiophen at denden.world/@kiophen, if this report was made in error please let me know!",
        "forward": "true",
        "category": "spam",
        "status_ids": [status_id] 
    }
    r = requests.post(url, data=json_data, headers=HEADERS)
    if r.status_code != 200:
        print("Failed to report account")
        return None
    print("Reported")
    r = r.json()
    susUser(r["target_account"]["id"], r["id"])
    if DOMAIN_ACTION != "nothing":
        checkFollows(r["target_account"]["acct"].split("@")[1])

def susUser(account_id, report_id):
    url = 'https://'+YOUR_DOMAIN+'/api/v1/admin/accounts/'+account_id+'/action'
    json_data = {
        "type": "suspend",
        "text": "Automated ban by kuroAntiSpam script by denden.world/@kiophen",
        "report_id": report_id
    }
    r = requests.post(url, data=json_data, headers=HEADERS)
    if r.status_code != 200:
        print("Failed to ban user")
        return None
    print(r)
    print(r.json())
    print("Banned successfully")


def checkFollows(instance):
    url = 'https://'+YOUR_DOMAIN+'/api/v1/admin/measures'
    json_data = {
        "keys[]": ["instance_follows", "instance_followers"],
        "start_at": "2024-02-17T00:00:00Z",
        "end_at": "2024-02-18T00:00:00Z",
        "instance_follows[domain]": instance,
        "instance_followers[domain]": instance
    }

    r = requests.post(url, data=json_data, headers=HEADERS)
    if r.status_code != 200:
        print("Failed to check admin/measures")
        return None
    r = r.json()
    print(r[0]["key"], r[0]["total"], r[1]["key"], r[1]["total"])
    if int(r[0]["total"]) + int(r[1]["total"]) == 0:
        blockInstance(instance)


def blockInstance(instance):
    global DOMAIN_ACTION
    if DOMAIN_ACTION in ["silence", "suspend"]:
        severity = "silence" if DOMAIN_ACTION == "silence" else "suspend"
        url = 'https://'+YOUR_DOMAIN+'/api/v1/admin/domain_blocks'
        json_data = {
            "domain": instance,
            "severity": severity,
            "public_comment": "Temporary action due to policy",
            "private_comment": "Automated action based on script settings"
        }
        r = requests.post(url, data=json_data, headers=HEADERS)
        if r.status_code != 200:
            print("Failed to apply action on instance")
            return None
        print(f"{severity.capitalize()}ed instance", instance)

n = 0

def main():
    global DOMAIN_ACTION
    global n 
    print("Starting kuroneko antibot...")
    if ACCESS_TOKEN == "changeme":
        print("You have to edit this file and change ACCESS_TOKEN to your access token!")
    if YOUR_DOMAIN == "mastodon.example":
        print("You have to edit this file and change YOUR_DOMAIN to your instance's domain name!")

    while True:
        checkTimeline()
        n+=1
        time.sleep(CHECK_INTERVAL)

if __name__ == '__main__':
    main()
